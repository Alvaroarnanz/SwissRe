from flask import Blueprint, request, jsonify
from services.vulnerability_service import VulnerabilityService

def create_routes(mongo):
    api_bp = Blueprint('api_bp', __name__)
    vulnerability_service = VulnerabilityService(mongo)

    @api_bp.route('/<string:cve>', methods=['GET'])
    def get_vulnerability(cve):
        vulnerability = vulnerability_service.get_vulnerability_by_cve(cve)
        if not vulnerability:
            return jsonify({'error': 'Vulnerability not found'}), 404
        return jsonify(vulnerability), 200

    @api_bp.route('', methods=['GET'])
    def get_vulnerabilities():
        filters = request.args.to_dict()
        vulnerabilities = vulnerability_service.get_filtered_vulnerabilities(filters)
        if not vulnerabilities:
            return jsonify({'error': 'No vulnerabilities found'}), 404
        return jsonify(vulnerabilities), 200

    @api_bp.route('', methods=['POST'])
    def create_vulnerability():
        data = request.get_json()

        # Verificar si ya existe un CVE igual
        existing_vulnerability = vulnerability_service.get_vulnerability_by_cve(data.get("cve"))
        if existing_vulnerability:
            return jsonify({"error": f"A vulnerability {data['cve']} already exists."}), 409

        # Insertar si no existe
        vulnerability_service.create_vulnerability(data)
        return jsonify({"message": "Vulnerability created successfully"}), 201

    @api_bp.route('/<string:cve>', methods=['DELETE'])
    def delete_vulnerability(cve):
        result = vulnerability_service.delete_vulnerability(cve)
        if not result:
            return jsonify({'error': 'Vulnerability not found'}), 404
        return jsonify({'message': 'Vulnerability deleted successfully'}), 200

    return api_bp
