using Moq;
using Moq.Protected;
using System.Net;
using VulnerabilityCLI.Models;
using VulnerabilityCLI.Services;
using Xunit;

namespace vulnerability_cli.Test
{
    public class ApiClientTests
    {
        [Fact]
        public async Task SendVulnerabilitiesAsync_ShouldSendDataSuccessfully()
        {
            // Arrange
            var httpClientHandlerMock = new Mock<HttpMessageHandler>();
            httpClientHandlerMock
                .Protected()
                .Setup<Task<HttpResponseMessage>>(
                    "SendAsync",
                    ItExpr.IsAny<HttpRequestMessage>(),
                    ItExpr.IsAny<CancellationToken>()
                )
                .ReturnsAsync(new HttpResponseMessage
                {
                    StatusCode = HttpStatusCode.OK
                });

            var httpClient = new HttpClient(httpClientHandlerMock.Object);
            var apiClient = new ApiClient(httpClient);

            var vulnerabilities = new List<Vulnerability>
            {
                new Vulnerability { Cve = "CVE-2023-1234" }
            };

            string apiUrl = "https://example.com/api/vulnerabilities";

            // Act
            await apiClient.SendVulnerabilitiesAsync(vulnerabilities, apiUrl);

            // Assert
            httpClientHandlerMock.Protected().Verify(
                "SendAsync",
                Times.Once(),
                ItExpr.Is<HttpRequestMessage>(req => req.Method == HttpMethod.Post),
                ItExpr.IsAny<CancellationToken>()
            );
        }
    }
}