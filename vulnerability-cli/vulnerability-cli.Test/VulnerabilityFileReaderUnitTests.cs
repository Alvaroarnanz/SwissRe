using System.Text.Json;
using vulnerabilityCLI.Models;
using VulnerabilityCLI.Models;
using VulnerabilityCLI.Services;
using Xunit;

namespace vulnerability_cli.Test
{
    public class VulnerabilityFileReaderTests
    {
        [Fact]
        public async Task ReadVulnerabilitiesAsync_ShouldReturnVulnerabilities_WhenJsonIsValid()
        {
            // Arrange
            string filePath = "testFile.json";
            var vulnerabilitiesList = new VulnerabilitiesList
            {
                Vulnerabilities = new List<Vulnerability>
                {
                    new Vulnerability { Cve = "CVE-2023-1234" }
                }
            };
            string jsonData = JsonSerializer.Serialize(vulnerabilitiesList);
            await File.WriteAllTextAsync(filePath, jsonData);
            var fileReader = new VulnerabilityFileReader();

            // Act
            var result = await fileReader.ReadVulnerabilitiesAsync(filePath);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("CVE-2023-1234", result.Vulnerabilities[0].Cve);

            // Cleanup
            File.Delete(filePath);
        }

        [Fact]
        public async Task ReadVulnerabilitiesAsync_ShouldReturnNull_WhenJsonIsInvalid()
        {
            // Arrange
            string filePath = "invalidTestFile.json";
            await File.WriteAllTextAsync(filePath, "invalid json data");
            var fileReader = new VulnerabilityFileReader();

            // Act
            var result = await fileReader.ReadVulnerabilitiesAsync(filePath);

            // Assert
            Assert.Null(result);

            // Cleanup
            File.Delete(filePath);
        }
    }
}