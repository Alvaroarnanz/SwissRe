using vulnerabilityCLI.Models;
using VulnerabilityCLI.Services;
using Microsoft.Extensions.DependencyInjection;

class Program
{
    static async Task Main(string[] args)
    {
        //configuration DI container
        var serviceProvider = new ServiceCollection()
            .AddSingleton<ArgumentValidator>()           //add ArgumentValidator service
            .AddSingleton<VulnerabilityFileReader>()     //add VulnerabilityFileReader service
            .AddSingleton<ApiClient>()                   //add ApiClient service
            .BuildServiceProvider();

        //get instances of services from DI container
        var validator = serviceProvider.GetRequiredService<ArgumentValidator>();
        var fileReader = serviceProvider.GetRequiredService<VulnerabilityFileReader>();
        var apiClient = serviceProvider.GetRequiredService<ApiClient>();

        try
        {
            if (!validator.IsValidArgs(args)) 
                return; 

            string filePath = args[1];
            string apiUrl = args[3];

            var vulnerabilitiesList = await fileReader.ReadVulnerabilitiesAsync(filePath);

            if (vulnerabilitiesList != null)
                await apiClient.SendVulnerabilitiesAsync(vulnerabilitiesList.Vulnerabilities, apiUrl); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}
